컴퓨터 구조와 운영체제를 알아야 데이터베이스를 재대로 이해할 수 있다는 말은 이 부분 때문이다.
더블어 인덱스의 이해를 위해서 이 부분을 알아야 한다.
최근에 새로운 데이터베이스 기술이 등장 다차원 인덱스 등 기술이 굉장히 많아져서 현장에서 공부해야할 것임.

보조기억장치에 데이터를 어떻게 저장할 것인가?
그래서 이 챕터는 하드디스크를 대상으로 하고 있다.
요즘은 거의 flash memory에 저장(스마트폰이 가능한 이유)
-->요즘은 flash memory 데이터를 어떻게 저장하느냐가 issue
flash memory(하이닉스, 삼성 성공이유) 그 안에 완전히 미니 컴퓨터
operating system과 memory management 이 부분의 경쟁력이 있다.(소프트웨어 기술)
어디서 관리가 되든 기본 원리는 비슷하기 때문에 하드디스크에 대해서 알아야 겠지.

** optimal !!
쿼리 종류(group by, selection, join ... 어떤 것을 많이 쓰는 지
어느 테이블과 어느 테이블의 조인이 많은 지를 다 알아야 물리적 설계가 사실 가능하다.)
이런걸 누가 다 파악하나..? 요즘은 통계를 기반으로 optimize하는 DB가 나오는 추세이다.(제 3의 기능)

저장 구조에 따라서 Access Method가 달라진다.
DBMS 마다 물리적 저장 구조가 다르다.(SQL만 통일됬지 나머지는 달라. 
그래서 해당 시스템 구조를 알아야 재대로 물리적 설계가 가능하다.)

결론: Index 구조를 잘 활용하는 것. 중요하다.

데이터는 보조기억장치에 저장되기 때문에 보조기억장치를 알아야 한다.

RAM 가장 이상적인 optimal 메모리
Random Access : 데이터가 어디에 있는 똑 같은 시간.
HDD는 불가능해

seek time variable이 너무 커서(트랙에 다른 헤드의 움직임)
한 실린더(트랙)에 같은 파일, 릴레이션을 넣으면 헤드의 움직임을 최소화 할 수 있다.
그래서 실린더 개념이 중요하다.
(그러나 하드디스크 종속성이 강해서 그렇게 설계해도 다른 하드에 옮기면 최적화가 되지 않는다.)


자주 참조되는 블록들은 주기억 장치에 남겨 놓는다.
메타데이타(스키마 인포메이션은 자주 리드하니까 버퍼에 남겨 놓는 것이 좋다.)
운영체제는 이것을 모른다.(무엇이 메타데이터이고 일반 데이터인지) 그래서 DBMS들은 보통 버퍼를 자신이 직접 관리한다.
이런 시스템들이 성능이 더 뛰어나고 좋다.
(DB를 설치할 때 이러한 운영체제와 DB 버퍼와 관련된 설정 메뉴얼이 있다고 한다.)
운영체제를 잘 안 씀 (LRU(Least Resent Used 버퍼교체전략) 이런거 DB에서는 이게 최적이 아닐 수 있어서 별도의 방법을 사용한다.

