JOIN : 두 개 이상의 테이블 들을 연결 또는 결합하여 데이터를 출력하는 것(관계형 데이터 베이스의 가장 큰 장점)
                                    -->SELF JOIN : 
                                    -->EQUI JOIN : 
	-->Inner Join
JOIN                             -->NON-EQUI JOIN(= θ-JOIN)

                                    -->LEFT OUTER JOIN
	-->outer Join    -->RIGHT OUTER JOIN
                                    -->FULL OUTER JOIN

	-->Cross Join  : 테이블 간 JOIN 조건이 없는 경우 생길 수 있는 모든 데이터의 조합 (=Cartesian product)

INNER JOIN : 조인 조건을 만족하는 값만 처리

EQUI JOIN
1.NATURAL JOIN : 
동일한 이름을 갖는 모든 칼럼들에 대해 EQUI(=) JOIN을 수행한다.
중복 속성을 제거한다.
추가로 USING 조건절, ON 조건절, WHERE 절에서 JOIN 조건을 정의할 수 없다.
SQL Server에서는 지원하지 않는다.
EX)
SELCT DEPTNO, EMPNO, ENAME, DNAME
FROM EMP NATURAL JOIN DEPT;

2. JOIN ~ USING
natural join에서는 모든 일치되는 칼럼들에 대해 join이 이루어지지만 USING 조건절을 이용하면 같은 이름을 가진 칼럼들 중에서 원하는 칼럼에 대해서만 선택적으로 EQUI(=) JOIN을 수행한다.
NATURAL JOIN과 마찬가지로 JOIN 칼럼에 대해서는 ALIAS나 테이블 이름과 같은 접두사를 붙일 수 없다.
SQL Server에서는 지원하지 않는다.
EX)
SELCT DEPTNO, EMPNO, ENAME, DNAME
FROM EMP JOIN DEPT 
USING (DEPTNO);

3. ON 조건절
칼럼명이 다르더라도 JOIN 조건을 사용할 수 있는 장점이 있다.
ON 조건절을 사용한 JOIN의 경우는 ALIAS나 테이블 명과 같은 접두사를 사용하여 SELECT에 사용되는 칼럼을 논리적으로 명확하게 지정해주어야 한다.
명시적으로 JOIN의 조건을 구분할 수 있다. 다만, FROM 절에 테이블이 많이 사용될 경우 다소 복잡하게 보여 가독성이 떨어지는 단점이 있다.
EX)
SELECT   E.EMPNO, D.DEPTNO, D.DNAME, T.DNAME New_DNAME
FROM    EMP E JOIN DEPT D
ON        (E.DEPTNO = D.DEPTNO)
            JOIN DEPT_TEMP T
ON        (E.DEPTNO = T.DEPTNO);


OUTER JOIN : JOIN 조건에서 동일한 값이 없는 행도 반환할 때 사용할 수 있다.

LEFT OUTER JOIN (가장 많이 사용)
조인 수행 시 먼저 표기된 좌측 테이블에 해당하는 데이터를 먼저 읽은 후 나중에 표기된 우측 테이블에서 JOIN 대상 데이터를 읽어 온다. (즉, 테이블 A와 B가 있을 때, Table 'A'가 (#기준#)이 된다.) --> A와 B를 비교해서 B의 JOIN 칼럼에서 같은 값이 있을 때 그 해당 데이터를 가져오고, B의 JOIN 칼럼에서 같은 값이 없는 경우에는 B테이블에서 가져오는 칼럼들은 NULL 값으로 채운다. (LEFT JOIN으로 OUTER 키워드를 생략해서 사용할 수 있다.)

예제)
FROM
  books b,
  library.languages l
WHERE
  l.id = b.language_id(+)
…is effectively identical to this:

FROM
  library.languages l
LEFT OUTER JOIN
  books b
ON
  b.language_id = l.id

테이블 3개 이상
SELECT
products.Name as prodName,
rateplans.ID as rateID,
rateplans.Name as rateName,
servarea.ID as servID,
servarea.Name as servName
FROM carts, transactions, products
LEFT OUTER JOIN rateplans
ON rateplans.ID = transactions.RatePlan
LEFT OUTER JOIN servarea
ON servarea.ID = transactions.ServArea
