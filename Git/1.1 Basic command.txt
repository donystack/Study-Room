(생활코딩)
여기가지의 내용은 모든 버전관리의 공통적인 사항. (핵심은 백업)
드롭박스등을 이용해 버전관리 디렉토리를 백업해 놓는다면 모든 것을 완벽하게 복구할 수 있다.(백업의 책임은 자기 자신)
다음 수업부터는 git의 특별함을 배운다.(branch를 비롯해)(협업을 하게 된다면 위에것 까지의 백업의 노력을 택도 없다. 나머지 수업 듣자.)

1. Git을 다운 받는다. [https://git-scm.com/](https://git-scm.com/)

2. git bash(윈도우를 리눅스 명령어로 관리가능)라는 파일을 실행한다.

3.프로젝트 파일을 만듭시다.
(나의 pwd는 /c/Users/DongHo/ 이었다.)
mkdir projectN

프로젝트 디렉토리로 들어갑니다. 
cd projectN

현재 디렉토리를 git의 (버전) 저장소로 만듭니다. 
git init

그러면 파란색 글씨로 .git/(버전관리를 하게되면 여러가지 정보가 저장되는 곳이다.) 폴더가 생성된 것을 확인할 수 있다.

버전과 변화
버전은 의미있는 변화를 의미한다.

commit 하기전에 필요한 설정
버전에 포함될 버전을 만든 사람에 대한 정보를 설정합니다. 이 설정은 ~/.gitconfig 파일에 저장되고 1번만 해주면 됩니다.

1. git config --global user.name "자신의 닉네임"
2. git config --global user.email "자신의 이메일"

git의 특징은 add한 파일만(-->stage area) commit(-->repository)할 수 있다는 점이다.
commit하는 방법(순서)는 1.변화된 파일 등록 2. 해당 파일 add 3. add된 파일 commit(commit message 입력하면 완료)등록.


git log를 하면 이전 기록들을 볼 수 있다.
(commit message와 그 옆에는 버전주소(id)를 알 수 있다. 그리고 버전들의 리스트들을 볼 수 있음.)
버전의 만든 것의 효용
1.로그에서 출력되는 버전간의 차이점을 확인할 수 있다.
git log -p(commit과 commit사이의 소스상의 차이를 알 수 있다.)
버전(1~n(commit message))내용을 살펴보면 ---부분은 이전 버전을 의미하며 +++는 버전이 생성되면서 갱신된 내용을 의미한다.

2, 특정 버전 간의 차이점을 비교할 때
git diff '버전 id'..'버전 id2'
(git log를 보면 버전 고유의 commit번호를 확인할 수 있다. 그것은 복사해서 입력하면 된다.)

3.git add하기 전과 add한 후의 파일 내용을 비교할 때 
git diff
commit하기 전에 최종적으로 소스 상의 오류가 없는 지 점검할 때 유용하다.
(조금 더 자세하게 들어가면 다른데 이정도로 이해하도록 하자.)

과거로 돌아가기.(되돌리기)
reset(초기화) vs revert

reset
아래 명령은 버전 id로 돌아가는 명령입니다. 
git reset --hard "버전 id" 
(--hard는 가장 쉬운 방법이지만 위험, 나머지 soft, mixed등의 안전한 옵션을 이용할 수도 있다. git의 원리를 이해하고 섬세하게 사용하자.)
그 이후의 버전은 삭제됨.(물론 git은 기록을 남기기 때문에 복구할 수 있다.)

revert는 commit을 취소하면서 새로운 버전을 생성.
(우선은 여기까지만 알자)
 
명령의 빈도와 메뉴얼 보는 방법
ex) git commit --help하면 commit에 대한 설명과 옵션에 대한 설명이 있다.
git commit -a(all)을 하면 add의 과정을 생략하고 commit할 수 있다.
git commit -am "xxxx" 하면 vim으로 commit message를 입력하지 않고 곧 바로 message를 등록

어떤 문제를 해결하는데 핵심적인 방법.
메뉴얼보기, 커뮤니티에 질문하기, 검색하기
